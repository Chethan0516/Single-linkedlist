class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class Single:
    def __init__(self):
        self.head = None

    def append_head(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node
    
    
    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        curr = self.head
        while curr.next:
            curr = curr.next
        curr.next = new_node

    def display(self):
        curr = self.head
        while curr:
            print(curr.data, end="-->")
            curr = curr.next
        print("None") 

    def dis_rec(self):
        curr = self.head
        def _dis(curr):
            if not curr:
                print("None")
                return
            print(curr.data, end="-->")
            _dis(curr.next)
        _dis(curr)


    def clear(self):
        self.head = None

    def search(self, data):
        if not self.head:
            return
        curr = self.head
        index = 0
        while curr is not None:
            if curr.data != data:
                curr = curr.next
                index += 1
            else:
                print(curr.data, index)
                return 
        if curr is None:
            print("none")
        
    def search_rec(self, data):
        curr = self.head
        def _search(curr, index):
            if not curr:
                return
            
            if curr.data == data:
                print(index, curr.data)
            
            
            _search(curr.next, index+1)
        _search(curr, 0)

    def length(self):
        curr = self.head
        count = 0
        while curr:
            count += 1
            curr = curr.next
        print(count)

    def length_rec(self):
        curr = self.head
        def _length(curr):
            if not curr:
                return 0
            return 1 + _length(curr.next)
        return _length(curr)

    def insert(self, key, data):
        if not self.head:
            return
        curr = self.head
        while curr and curr.data != key:
            curr = curr.next
        if not curr:
            print("not found")
        new_node = Node(data)
        new_node.next = curr.next
        curr.next = new_node
    
    def insert_before_node(self, key, data):
        if not self.head:
            return
        curr = self.head
        prev = None
        while curr and curr.data != key:
            prev = curr
            curr = curr.next
        if not curr:
            print("not found")
        new_node = Node(data)
        new_node.next = prev.next
        prev.next = new_node
    
    # def insert_before_rec(self, key, data):
    #     if not self.head:
    #         return 
    #     curr = self.head
    #     def _insert(curr, prev, key, data):
            
    #         if curr.data == key:
    #             new_node = Node(data)
    #             new_node.next = prev.next
    #             prev.next = new_node
    #         return _insert(curr.next, prev, key, data)
    #     return _insert(curr, None, key, data)

    def insert_pos(self, index, data):
        new_node = Node(data)
        if index == 0:
            new_node.next = self.head
            self.head = new_node
            return 
        curr = self.head
        i = 0
        while curr is not None and i < index - 2:
            curr = curr.next
            i += 1
        if curr is None:
            print("not found")
            return
        # for _ in range(1, index - 1):
        #     if not curr:
        #         return 
        #     curr = curr.next
        new_node.next = curr.next
        curr.next = new_node
        
    def deletion(self, pos):
        if not self.head:
            return 
        if pos == 0:
            self.head = self.head.next
            return
        curr = self.head
        i = 0
        while curr and i < pos - 2:
            curr = curr.next
            i += 1
        if curr is None:
            print("not found")
            return 
        curr.next = curr.next.next

    def deletion_end(self):
        if not self.head:
            return 
        curr = self.head
        prev = None
        while curr.next:
            prev = curr
            curr = curr.next
        prev.next = None
    
    def reverse(self):
        if not self.head:
            return 
        curr = self.head
        prev = None
        while curr:
            new_node = curr.next
            curr.next = prev
            prev = curr
            curr = new_node
        self.head = prev

    def duplicates(self):
        if not self.head:
            return
        curr = self.head
        seen = set()
        prev = None
        while curr:
            if curr.data in seen:
                prev.next = curr.next
            else:
                prev = curr
                seen.add(curr.data)
            curr = curr.next




node = Single()

for i in range(4):
    node.append_head(i)
node.display()
node.clear()
for i in range(4):
    node.append(i)
node.display()
node.dis_rec()
node.search(2)
node.search_rec(2)
node.insert(2, 10)
node.display()
node.insert_before_node(10, 9)
node.display()
node.display()
node.clear()
node.append(1)
node.append(3)
node.append(4)
node.append(5)
node.display()
node.insert_pos(2, 2)
node.display()
node.deletion(2)
node.display()
node.deletion_end()
node.display()
node.reverse()
node.display()
node.clear()
node.append(3)
node.append(5)
node.append(3)
node.append(8)
node.append(10)
node.append(5)
node.display()
node.duplicates()
node.display()



node.length()
print(node.length_rec())
